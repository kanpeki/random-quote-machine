{"version":3,"sources":["components/QuoteBox.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["QuoteBox","_this","this","react_default","a","createElement","id","props","text","author","style","color","href","link","target","rel","className","aria-hidden","backgroundColor","onClick","reset","Component","Footer","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setQuoteAndColor","setQuote","then","setColor","getNumber","count","max","newPos","Math","floor","random","state","previousPos","setState","asyncToGenerator","regenerator_default","mark","_callee","quotes","pos","quote","wrap","_context","prev","next","length","stop","newColor","i","initialPos","components_QuoteBox","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.605d1344.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/QuoteBox.css';\r\n\r\nclass QuoteBox extends Component {\r\n\r\n   render() {\r\n\r\n        return (\r\n            <div id=\"quote-box\">\r\n                <p id=\"text\">{this.props.text}</p>\r\n                <p id=\"author\">{this.props.author}</p>\r\n                <a id=\"tweet-quote\" style={{color:this.props.color}} href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fa fa-twitter-square\" aria-hidden=\"true\"></i>\r\n                </a>\r\n                <button id=\"new-quote\" style={{backgroundColor:this.props.color}} onClick={() => this.props.reset()}>New quote</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//export {QuoteBox};\r\nexport default QuoteBox;\r\n","import React from 'react';\r\nimport '../styles/Footer.css';\r\n\r\nconst Footer = () =>\r\n{\r\n    return (\r\n        <footer className=\"app-footer\">\r\n            Coded by <a href=\"https://www.freecodecamp.com/kanpeki\" target=\"_blank\" rel=\"noopener noreferrer\">kanpeki</a>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, { Component } from 'react';\n//import {QuoteBox} from './QuoteBox';\nimport QuoteBox from './QuoteBox';\nimport Footer from './Footer';\nimport '../styles/App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n\t\t\tinitialPos: 0,\n      pos: 0,\n      color: \"\",\n      text: \"\",\n\t\t\tauthor: \"\",\n\t\t\tlink: \"https://twitter.com/intent/tweet\"\n    };\n  };\n\n  componentDidMount() {\n    this.setQuoteAndColor();\n  };\n\n  setQuoteAndColor = () => {\n    this.setQuote().then(this.setColor());\n  }\n\n  getNumber = (count) => {\n    var min = 0;\n    var max = count;            \n    var newPos = Math.floor(Math.random() * (max - min)) + min;\n    if (this.state.previousPos === newPos) {\n        newPos = this.getNumber();\n    }\n    this.setState({previousPos: newPos});\n    return newPos;\n  }\n\n  setQuote = async () => \n  {\n    // const getQuote = async () => {\n    //   const response = await fetch('https://cors-anywhere.herokuapp.com/http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en');\t\n    //   const myJson = await response.json();\n    //   var text = myJson.quoteText;\n    //   var author = myJson.quoteAuthor.length > 0 ? myJson.quoteAuthor : \"Anonymous\";\n    //   return {text, author};\n    // };\n\n    const quotes = [\n      {text: \"It's the possibility of having a dream come true that makes life interesting.\", author: \"Paulo Coelho\"},\n      {text: \"No one can make you feel inferior without your consent.No one can make you feel inferior without your consent.\", author: \"Eleanor Roosevelt\"},\n      {text: \"It is better to remain silent at the risk of being thought a fool, than to talk and remove all doubt of it.\", author: \"Maurice Switzer\"},\n      {text: \"The fool doth think he is wise, but the wise man knows himself to be a fool.\", author: \"William Shakespeare\"},\n      {text: \"Whenever you find yourself on the side of the majority, it is time to reform (or pause and reflect).\", author: \"Mark Twain\"},\n      {text: \"Knowing yourself is the beginning of all wisdom.\", author: \"Aristotle\"},\n      {text: \"Never let your sense of morals prevent you from doing what is right.\", author: \"Isaac Asimov\"},\n      {text: \"The only true wisdom is in knowing you know nothing.\", author: \"Socrates\"},\n      {text: \"The saddest aspect of life right now is that science gathers knowledge faster than society gathers wisdom.\", author: \"Isaac Asimov\"},\n      {text: \"Count your age by friends, not years. Count your life by smiles, not tears.\", author: \"John Lennon\"},\n      {text: \"May you live every day of your life.\", author: \"Jonathan Swift\"},\n      {text: \"It is the mark of an educated mind to be able to entertain a thought without accepting it.\", author: \"Aristotle\"},\n      {text: \"The secret of life, though, is to fall seven times and to get up eight times.\", author: \"Paulo Coelho\"},\n      {text: \"The unexamined life is not worth living.\", author: \"Socrates\"},\n      {text: \"Think before you speak. Read before you think.\", author: \"Fran Lebowitz\"}\n  ];\n\n    let pos = this.getNumber(quotes.length);\n    let quote = quotes[pos];\n\n    //let quote = await getQuote();\n\n    this.setState({text: quote.text });\n    this.setState({author: quote.author });\n    this.setState({link: \"https://twitter.com/intent/tweet?text=\\\"\" + quote.text + \"\\\" by \" + quote.author });\n  }\n\n  setColor = () => {\n    var letters = '0123456789ABCDEF';\n    var newColor = '#';\n    for (var i = 0; i < 6; i++) {\n      newColor += letters[Math.floor(Math.random() * 16)];\n    }\n    this.setState({color: newColor});\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\" style={{color: this.state.color, backgroundColor: this.state.color}}>\n        <QuoteBox text={this.state.text} author={this.state.author} link={this.state.link} color={this.state.color} reset={this.setQuoteAndColor} />\n\t\t\t\t<Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}